/*
 * Copyright (c) 2003 Fabrice Bellard
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

/**
 * @file
 * simple media player based on the FFmpeg libraries
 */

#include "config.h"
#include <inttypes.h>
#include <math.h>
#include <limits.h>
#include <signal.h>
#include <stdint.h>

#include "libavutil/avstring.h"
#include "libavutil/eval.h"
#include "libavutil/mathematics.h"
#include "libavutil/pixdesc.h"
#include "libavutil/imgutils.h"
#include "libavutil/dict.h"
#include "libavutil/parseutils.h"
#include "libavutil/samplefmt.h"
#include "libavutil/avassert.h"
#include "libavutil/time.h"
#include "libavformat/avformat.h"
#include "libavdevice/avdevice.h"
#include "libswscale/swscale.h"
#include "libavutil/opt.h"
#include "libavcodec/avfft.h"
#include "libswresample/swresample.h"

#if CONFIG_AVFILTER
#include "libavfilter/avfilter.h"
#include "libavfilter/buffersink.h"
#include "libavfilter/buffersrc.h"
#endif

#include "ffmpeg_cmdutils.h"

#include <assert.h>

const char program_name[] = "ffplay";
const int program_birth_year = 2003;

#define MAX_QUEUE_SIZE (15 * 1024 * 1024)
#define MIN_FRAMES 25
#define EXTERNAL_CLOCK_MIN_FRAMES 2
#define EXTERNAL_CLOCK_MAX_FRAMES 10

/* Minimum SDL audio buffer size, in samples. */
#define AWTK_AUDIO_MIN_BUFFER_SIZE 512
/* Calculate actual buffer size keeping in mind not cause too frequent audio callbacks */
#define AWTK_AUDIO_MAX_CALLBACKS_PER_SEC 30

/* Step size for volume control in dB */
#define AWTK_VOLUME_STEP (0.75)

/* no AV sync correction is done if below the minimum AV sync threshold */
#define AV_SYNC_THRESHOLD_MIN 0.04
/* AV sync correction is done if above the maximum AV sync threshold */
#define AV_SYNC_THRESHOLD_MAX 0.1
/* If a frame duration is longer than this, it will not be duplicated to compensate AV sync */
#define AV_SYNC_FRAMEDUP_THRESHOLD 0.1
/* no AV correction is done if too big error */
#define AV_NOSYNC_THRESHOLD 10.0

/* maximum audio speed change to get correct sync */
#define SAMPLE_CORRECTION_PERCENT_MAX 10

/* external clock speed adjustment constants for realtime sources based on buffer fullness */
#define EXTERNAL_CLOCK_SPEED_MIN 0.900
#define EXTERNAL_CLOCK_SPEED_MAX 1.010
#define EXTERNAL_CLOCK_SPEED_STEP 0.001

/* we use about AUDIO_DIFF_AVG_NB A-V differences to make the average */
#define AUDIO_DIFF_AVG_NB 20

/* polls for possible required screen refresh at least this often, should be less than 1/fps */
#define REFRESH_RATE 0.01

/* NOTE: the size must be big enough to compensate the hardware audio buffersize size */
/* TODO: We assume that a decoded and resampled frame fits into this buffer */
#define SAMPLE_ARRAY_SIZE (8 * 65536)

#define CURSOR_HIDE_DELAY 1000000

#define USE_ONEPASS_SUBTITLE_RENDER 1

static unsigned sws_flags = SWS_BICUBIC;

typedef struct MyAVPacketList {
  AVPacket pkt;
  struct MyAVPacketList* next;
  int serial;
} MyAVPacketList;

typedef struct PacketQueue {
  MyAVPacketList *first_pkt, *last_pkt;
  int nb_packets;
  int size;
  int64_t duration;
  int abort_request;
  int serial;
  tk_mutex_t* mutex;
  tk_cond_t* cond;
} PacketQueue;

#define VIDEO_PICTURE_QUEUE_SIZE 3
#define SUBPICTURE_QUEUE_SIZE 16
#define SAMPLE_QUEUE_SIZE 9
#define FRAME_QUEUE_SIZE \
  FFMAX(SAMPLE_QUEUE_SIZE, FFMAX(VIDEO_PICTURE_QUEUE_SIZE, SUBPICTURE_QUEUE_SIZE))

typedef struct AudioParams {
  int freq;
  int channels;
  int64_t channel_layout;
  enum AVSampleFormat fmt;
  int frame_size;
  int bytes_per_sec;
} AudioParams;

typedef struct Clock {
  double pts;       /* clock base */
  double pts_drift; /* clock base minus time at which we updated the clock */
  double last_updated;
  double speed;
  int serial; /* clock is based on a packet with this serial */
  int paused;
  int* queue_serial; /* pointer to the current packet queue serial, used for obsolete clock
                        detection */
} Clock;

/* Common struct for handling all types of decoded data and allocated render buffers. */
typedef struct Frame {
  AVFrame* frame;
  AVSubtitle sub;
  int serial;
  double pts;      /* presentation timestamp for the frame */
  double duration; /* estimated duration of the frame */
  int64_t pos;     /* byte position of the frame in the input file */
  int width;
  int height;
  int format;
  AVRational sar;
  int flip_v;
} Frame;

typedef struct FrameQueue {
  Frame queue[FRAME_QUEUE_SIZE];
  int rindex;
  int windex;
  int size;
  int max_size;
  int keep_last;
  int rindex_shown;
  tk_mutex_t* mutex;
  tk_cond_t* cond;
  PacketQueue* pktq;
} FrameQueue;

enum {
  AV_SYNC_AUDIO_MASTER, /* default choice */
  AV_SYNC_VIDEO_MASTER,
  AV_SYNC_EXTERNAL_CLOCK, /* synchronize to an external clock */
};

typedef struct Decoder {
  AVPacket pkt;
  PacketQueue* queue;
  AVCodecContext* avctx;
  int pkt_serial;
  int finished;
  int packet_pending;
  tk_cond_t* empty_queue_cond;
  int64_t start_pts;
  AVRational start_pts_tb;
  int64_t next_pts;
  AVRational next_pts_tb;
  tk_thread_t* decoder_tid;
} Decoder;

typedef struct _VideoState {
  tk_thread_t* read_tid;
  AVInputFormat* iformat;
  int abort_request;
  int force_refresh;
  int paused;
  int last_paused;
  int queue_attachments_req;
  int seek_req;
  int seek_flags;
  int64_t seek_pos;
  int64_t seek_rel;
  int read_pause_return;
  AVFormatContext* ic;
  int realtime;

  Clock audclk;
  Clock vidclk;
  Clock extclk;

  FrameQueue pictq;
  FrameQueue subpq;
  FrameQueue sampq;

  Decoder auddec;
  Decoder viddec;
  Decoder subdec;

  int audio_stream;

  int av_sync_type;

  double audio_clock;
  int audio_clock_serial;
  double audio_diff_cum; /* used for AV difference average computation */
  double audio_diff_avg_coef;
  double audio_diff_threshold;
  int audio_diff_avg_count;
  AVStream* audio_st;
  PacketQueue audioq;
  int audio_hw_buf_size;
  uint8_t* audio_buf;
  uint8_t* audio_buf1;
  unsigned int audio_buf_size; /* in bytes */
  unsigned int audio_buf1_size;
  int audio_buf_index; /* in bytes */
  int audio_write_buf_size;
  int audio_volume;
  int muted;
  struct AudioParams audio_src;
#if CONFIG_AVFILTER
  struct AudioParams audio_filter_src;
#endif
  struct AudioParams audio_tgt;
  struct SwrContext* swr_ctx;
  int frame_drops_early;
  int frame_drops_late;

  enum ShowMode {
    SHOW_MODE_NONE = -1,
    SHOW_MODE_VIDEO = 0,
    SHOW_MODE_WAVES,
    SHOW_MODE_RDFT,
    SHOW_MODE_NB
  } show_mode;
  int16_t sample_array[SAMPLE_ARRAY_SIZE];
  int sample_array_index;
  int last_i_start;
  RDFTContext* rdft;
  int rdft_bits;
  FFTSample* rdft_data;
  int xpos;
  double last_vis_time;

  int subtitle_stream;
  AVStream* subtitle_st;
  PacketQueue subtitleq;

  double frame_timer;
  double frame_last_returned_time;
  double frame_last_filter_delay;
  int video_stream;
  AVStream* video_st;
  PacketQueue videoq;
  double max_frame_duration;  // maximum duration of a frame - above this, we consider the jump a
                              // timestamp discontinuity
  struct SwsContext* sub_convert_ctx;
  int eof;

  char* filename;
  int width, height, xleft, ytop;
  int step;

#if CONFIG_AVFILTER
  int vfilter_idx;
  AVFilterContext* in_video_filter;   // the first filter in the video chain
  AVFilterContext* out_video_filter;  // the last filter in the video chain
  AVFilterContext* in_audio_filter;   // the first filter in the audio chain
  AVFilterContext* out_audio_filter;  // the last filter in the audio chain
  AVFilterGraph* agraph;              // audio filter graph
#endif

  int last_video_stream, last_audio_stream, last_subtitle_stream;

  tk_cond_t* continue_read_thread;

  /*media player*/
  bitmap_t* image;
  uint32_t frame_width;
  uint32_t frame_height;
  media_player_t* player;
  struct SwsContext* swsContext;
} VideoState;

static void video_display(VideoState* is);

/* options specified by the user */
static int audio_disable;
static int video_disable;
static int subtitle_disable;
static const char* wanted_stream_spec[AVMEDIA_TYPE_NB] = {0};
static int seek_by_bytes = -1;
static float seek_interval = 10;
static int borderless;
static int alwaysontop;
static int startup_volume = 100;
static int show_status = 1;
static int av_sync_type = AV_SYNC_AUDIO_MASTER;
static int64_t start_time = AV_NOPTS_VALUE;
static int64_t duration = AV_NOPTS_VALUE;
static int fast = 0;
static int genpts = 0;
static int lowres = 0;
static int decoder_reorder_pts = -1;
static int autoexit;
static int exit_on_keydown;
static int exit_on_mousedown;
static int loop = 1;
static int framedrop = -1;
static int infinite_buffer = -1;
static enum ShowMode show_mode = SHOW_MODE_NONE;
static const char* audio_codec_name;
static const char* subtitle_codec_name;
static const char* video_codec_name;
double rdftspeed = 0.02;
static int64_t cursor_last_shown;
static int cursor_hidden = 0;
#if CONFIG_AVFILTER
static const char** vfilters_list = NULL;
static int nb_vfilters = 0;
static char* afilters = NULL;
#endif
static int autorotate = 1;
static int find_stream_info = 1;
static int filter_nbthreads = 0;

/* current context */
static int is_full_screen;
static int64_t audio_callback_time;

static AVPacket flush_pkt;

static audio_device_t* audio_dev;

static const struct TextureFormatEntry {
  enum AVPixelFormat format;
  bitmap_format_t texture_fmt;
} sdl_texture_format_map[] = {
    {AV_PIX_FMT_RGB565, BITMAP_FMT_RGB565},
    {AV_PIX_FMT_BGR565, BITMAP_FMT_BGR565},
    {AV_PIX_FMT_ARGB, BITMAP_FMT_ARGB8888},
    {AV_PIX_FMT_RGBA, BITMAP_FMT_RGBA8888},
    {AV_PIX_FMT_ABGR, BITMAP_FMT_ABGR8888},
    {AV_PIX_FMT_BGRA, BITMAP_FMT_BGRA8888},
    {AV_PIX_FMT_NONE, 0},
};

static enum AVPixelFormat from_bitmap_format(bitmap_format_t texture_fmt) {
  uint32_t i = 0;
  for (i = 0; i < ARRAY_SIZE(sdl_texture_format_map); i++) {
    if (sdl_texture_format_map[i].texture_fmt == texture_fmt) {
      return sdl_texture_format_map[i].format;
    }
  }

  return AV_PIX_FMT_NONE;
}

static inline int cmp_audio_fmts(enum AVSampleFormat fmt1, int64_t channel_count1,
                                 enum AVSampleFormat fmt2, int64_t channel_count2) {
  /* If channel count == 1, planar and non-planar formats are the same */
  if (channel_count1 == 1 && channel_count2 == 1)
    return av_get_packed_sample_fmt(fmt1) != av_get_packed_sample_fmt(fmt2);
  else
    return channel_count1 != channel_count2 || fmt1 != fmt2;
}

static inline int64_t get_valid_channel_layout(int64_t channel_layout, int channels) {
  if (channel_layout && av_get_channel_layout_nb_channels(channel_layout) == channels)
    return channel_layout;
  else
    return 0;
}

static int packet_queue_put_private(PacketQueue* q, AVPacket* pkt) {
  MyAVPacketList* pkt1;

  if (q->abort_request) return -1;

  pkt1 = av_malloc(sizeof(MyAVPacketList));
  if (!pkt1) return -1;
  pkt1->pkt = *pkt;
  pkt1->next = NULL;
  if (pkt == &flush_pkt) q->serial++;
  pkt1->serial = q->serial;

  if (!q->last_pkt)
    q->first_pkt = pkt1;
  else
    q->last_pkt->next = pkt1;
  q->last_pkt = pkt1;
  q->nb_packets++;
  q->size += pkt1->pkt.size + sizeof(*pkt1);
  q->duration += pkt1->pkt.duration;
  /* XXX: should duplicate packet data in DV case */
  tk_cond_signal(q->cond);
  return 0;
}

static int packet_queue_put(PacketQueue* q, AVPacket* pkt) {
  int ret;

  tk_mutex_lock(q->mutex);
  ret = packet_queue_put_private(q, pkt);
  tk_mutex_unlock(q->mutex);

  if (pkt != &flush_pkt && ret < 0) av_packet_unref(pkt);

  return ret;
}

static int packet_queue_put_nullpacket(PacketQueue* q, int stream_index) {
  AVPacket pkt1, *pkt = &pkt1;
  av_init_packet(pkt);
  pkt->data = NULL;
  pkt->size = 0;
  pkt->stream_index = stream_index;
  return packet_queue_put(q, pkt);
}

/* packet queue handling */
static int packet_queue_init(PacketQueue* q) {
  memset(q, 0, sizeof(PacketQueue));
  q->mutex = tk_mutex_create();
  if (!q->mutex) {
    av_log(NULL, AV_LOG_FATAL, "tk_mutex_create(): %s\n", "error");
    return AVERROR(ENOMEM);
  }
  q->cond = tk_cond_create();
  if (!q->cond) {
    av_log(NULL, AV_LOG_FATAL, "tk_cond_create(): %s\n", "error");
    return AVERROR(ENOMEM);
  }
  q->abort_request = 1;
  return 0;
}

static void packet_queue_flush(PacketQueue* q) {
  MyAVPacketList *pkt, *pkt1;

  tk_mutex_lock(q->mutex);
  for (pkt = q->first_pkt; pkt; pkt = pkt1) {
    pkt1 = pkt->next;
    av_packet_unref(&pkt->pkt);
    av_freep(&pkt);
  }
  q->last_pkt = NULL;
  q->first_pkt = NULL;
  q->nb_packets = 0;
  q->size = 0;
  q->duration = 0;
  tk_mutex_unlock(q->mutex);
}

static void packet_queue_destroy(PacketQueue* q) {
  packet_queue_flush(q);
  tk_mutex_destroy(q->mutex);
  tk_cond_destroy(q->cond);
}

static void packet_queue_abort(PacketQueue* q) {
  tk_mutex_lock(q->mutex);

  q->abort_request = 1;

  tk_cond_signal(q->cond);

  tk_mutex_unlock(q->mutex);
}

static void packet_queue_start(PacketQueue* q) {
  tk_mutex_lock(q->mutex);
  q->abort_request = 0;
  packet_queue_put_private(q, &flush_pkt);
  tk_mutex_unlock(q->mutex);
}

/* return < 0 if aborted, 0 if no packet and > 0 if packet.  */
static int packet_queue_get(PacketQueue* q, AVPacket* pkt, int block, int* serial) {
  MyAVPacketList* pkt1;
  int ret;

  tk_mutex_lock(q->mutex);

  for (;;) {
    if (q->abort_request) {
      ret = -1;
      break;
    }

    pkt1 = q->first_pkt;
    if (pkt1) {
      q->first_pkt = pkt1->next;
      if (!q->first_pkt) q->last_pkt = NULL;
      q->nb_packets--;
      q->size -= pkt1->pkt.size + sizeof(*pkt1);
      q->duration -= pkt1->pkt.duration;
      *pkt = pkt1->pkt;
      if (serial) *serial = pkt1->serial;
      av_free(pkt1);
      ret = 1;
      break;
    } else if (!block) {
      ret = 0;
      break;
    } else {
      tk_cond_wait(q->cond, q->mutex);
    }
  }
  tk_mutex_unlock(q->mutex);
  return ret;
}

static void decoder_init(Decoder* d, AVCodecContext* avctx, PacketQueue* queue,
                         tk_cond_t* empty_queue_cond) {
  memset(d, 0, sizeof(Decoder));
  d->avctx = avctx;
  d->queue = queue;
  d->empty_queue_cond = empty_queue_cond;
  d->start_pts = AV_NOPTS_VALUE;
  d->pkt_serial = -1;
}

static int decoder_decode_frame(Decoder* d, AVFrame* frame, AVSubtitle* sub) {
  int ret = AVERROR(EAGAIN);

  for (;;) {
    AVPacket pkt;

    if (d->queue->serial == d->pkt_serial) {
      do {
        if (d->queue->abort_request) return -1;

        switch (d->avctx->codec_type) {
          case AVMEDIA_TYPE_VIDEO:
            ret = avcodec_receive_frame(d->avctx, frame);
            if (ret >= 0) {
              if (decoder_reorder_pts == -1) {
                frame->pts = frame->best_effort_timestamp;
              } else if (!decoder_reorder_pts) {
                frame->pts = frame->pkt_dts;
              }
            }
            break;
          case AVMEDIA_TYPE_AUDIO:
            ret = avcodec_receive_frame(d->avctx, frame);
            if (ret >= 0) {
              AVRational tb = (AVRational){1, frame->sample_rate};
              if (frame->pts != AV_NOPTS_VALUE)
                frame->pts = av_rescale_q(frame->pts, d->avctx->pkt_timebase, tb);
              else if (d->next_pts != AV_NOPTS_VALUE)
                frame->pts = av_rescale_q(d->next_pts, d->next_pts_tb, tb);
              if (frame->pts != AV_NOPTS_VALUE) {
                d->next_pts = frame->pts + frame->nb_samples;
                d->next_pts_tb = tb;
              }
            }
            break;
          default: { break; }
        }
        if (ret == AVERROR_EOF) {
          d->finished = d->pkt_serial;
          avcodec_flush_buffers(d->avctx);
          return 0;
        }
        if (ret >= 0) return 1;
      } while (ret != AVERROR(EAGAIN));
    }

    do {
      if (d->queue->nb_packets == 0) tk_cond_signal(d->empty_queue_cond);
      if (d->packet_pending) {
        av_packet_move_ref(&pkt, &d->pkt);
        d->packet_pending = 0;
      } else {
        if (packet_queue_get(d->queue, &pkt, 1, &d->pkt_serial) < 0) return -1;
      }
    } while (d->queue->serial != d->pkt_serial);

    if (pkt.data == flush_pkt.data) {
      avcodec_flush_buffers(d->avctx);
      d->finished = 0;
      d->next_pts = d->start_pts;
      d->next_pts_tb = d->start_pts_tb;
    } else {
      if (d->avctx->codec_type == AVMEDIA_TYPE_SUBTITLE) {
        int got_frame = 0;
        ret = avcodec_decode_subtitle2(d->avctx, sub, &got_frame, &pkt);
        if (ret < 0) {
          ret = AVERROR(EAGAIN);
        } else {
          if (got_frame && !pkt.data) {
            d->packet_pending = 1;
            av_packet_move_ref(&d->pkt, &pkt);
          }
          ret = got_frame ? 0 : (pkt.data ? AVERROR(EAGAIN) : AVERROR_EOF);
        }
      } else {
        if (avcodec_send_packet(d->avctx, &pkt) == AVERROR(EAGAIN)) {
          av_log(
              d->avctx, AV_LOG_ERROR,
              "Receive_frame and send_packet both returned EAGAIN, which is an API violation.\n");
          d->packet_pending = 1;
          av_packet_move_ref(&d->pkt, &pkt);
        }
      }
      av_packet_unref(&pkt);
    }
  }
}

static void decoder_destroy(Decoder* d) {
  av_packet_unref(&d->pkt);
  avcodec_free_context(&d->avctx);
}

static void frame_queue_unref_item(Frame* vp) {
  av_frame_unref(vp->frame);
  avsubtitle_free(&vp->sub);
}

static int frame_queue_init(FrameQueue* f, PacketQueue* pktq, int max_size, int keep_last) {
  int i;
  memset(f, 0, sizeof(FrameQueue));
  if (!(f->mutex = tk_mutex_create())) {
    av_log(NULL, AV_LOG_FATAL, "tk_mutex_create(): %s\n", "error");
    return AVERROR(ENOMEM);
  }
  if (!(f->cond = tk_cond_create())) {
    av_log(NULL, AV_LOG_FATAL, "tk_cond_create(): %s\n", "error");
    return AVERROR(ENOMEM);
  }
  f->pktq = pktq;
  f->max_size = FFMIN(max_size, FRAME_QUEUE_SIZE);
  f->keep_last = !!keep_last;
  for (i = 0; i < f->max_size; i++)
    if (!(f->queue[i].frame = av_frame_alloc())) return AVERROR(ENOMEM);
  return 0;
}

static void frame_queue_destory(FrameQueue* f) {
  int i;
  for (i = 0; i < f->max_size; i++) {
    Frame* vp = &f->queue[i];
    frame_queue_unref_item(vp);
    av_frame_free(&vp->frame);
  }
  tk_mutex_destroy(f->mutex);
  tk_cond_destroy(f->cond);
}

static void frame_queue_signal(FrameQueue* f) {
  tk_mutex_lock(f->mutex);
  tk_cond_signal(f->cond);
  tk_mutex_unlock(f->mutex);
}

static Frame* frame_queue_peek(FrameQueue* f) {
  return &f->queue[(f->rindex + f->rindex_shown) % f->max_size];
}

static Frame* frame_queue_peek_next(FrameQueue* f) {
  return &f->queue[(f->rindex + f->rindex_shown + 1) % f->max_size];
}

static Frame* frame_queue_peek_last(FrameQueue* f) {
  return &f->queue[f->rindex];
}

static Frame* frame_queue_peek_writable(FrameQueue* f) {
  /* wait until we have space to put a new frame */
  tk_mutex_lock(f->mutex);
  while (f->size >= f->max_size && !f->pktq->abort_request) {
    tk_cond_wait(f->cond, f->mutex);
  }
  tk_mutex_unlock(f->mutex);

  if (f->pktq->abort_request) return NULL;

  return &f->queue[f->windex];
}

static Frame* frame_queue_peek_readable(FrameQueue* f) {
  /* wait until we have a readable a new frame */
  tk_mutex_lock(f->mutex);
  while (f->size - f->rindex_shown <= 0 && !f->pktq->abort_request) {
    tk_cond_wait(f->cond, f->mutex);
  }
  tk_mutex_unlock(f->mutex);

  if (f->pktq->abort_request) return NULL;

  return &f->queue[(f->rindex + f->rindex_shown) % f->max_size];
}

static void frame_queue_push(FrameQueue* f) {
  if (++f->windex == f->max_size) f->windex = 0;
  tk_mutex_lock(f->mutex);
  f->size++;
  tk_cond_signal(f->cond);
  tk_mutex_unlock(f->mutex);
}

static void frame_queue_next(FrameQueue* f) {
  if (f->keep_last && !f->rindex_shown) {
    f->rindex_shown = 1;
    return;
  }
  frame_queue_unref_item(&f->queue[f->rindex]);
  if (++f->rindex == f->max_size) f->rindex = 0;
  tk_mutex_lock(f->mutex);
  f->size--;
  tk_cond_signal(f->cond);
  tk_mutex_unlock(f->mutex);
}

/* return the number of undisplayed frames in the queue */
static int frame_queue_nb_remaining(FrameQueue* f) {
  return f->size - f->rindex_shown;
}

static void decoder_abort(Decoder* d, FrameQueue* fq) {
  packet_queue_abort(d->queue);
  frame_queue_signal(fq);
  tk_thread_join(d->decoder_tid);
  d->decoder_tid = NULL;
  packet_queue_flush(d->queue);
}

static void calculate_display_rect(rect_t* rect, int scr_xleft, int scr_ytop, int scr_width,
                                   int scr_height, int pic_width, int pic_height,
                                   AVRational pic_sar) {
  AVRational aspect_ratio = pic_sar;
  int64_t width, height, x, y;

  if (av_cmp_q(aspect_ratio, av_make_q(0, 1)) <= 0) aspect_ratio = av_make_q(1, 1);

  aspect_ratio = av_mul_q(aspect_ratio, av_make_q(pic_width, pic_height));

  /* XXX: we suppose the screen has a 1.0 pixel ratio */
  height = scr_height;
  width = av_rescale(height, aspect_ratio.num, aspect_ratio.den) & ~1;
  if (width > scr_width) {
    width = scr_width;
    height = av_rescale(width, aspect_ratio.den, aspect_ratio.num) & ~1;
  }
  x = (scr_width - width) / 2;
  y = (scr_height - height) / 2;
  rect->x = scr_xleft + x;
  rect->y = scr_ytop + y;
  rect->w = FFMAX((int)width, 1);
  rect->h = FFMAX((int)height, 1);
}

static void stream_component_close(VideoState* is, int stream_index) {
  AVFormatContext* ic = is->ic;
  AVCodecParameters* codecpar;

  if (stream_index < 0 || stream_index >= ic->nb_streams) return;
  codecpar = ic->streams[stream_index]->codecpar;

  switch (codecpar->codec_type) {
    case AVMEDIA_TYPE_AUDIO:
      decoder_abort(&is->auddec, &is->sampq);
      audio_device_destroy(audio_dev);
      decoder_destroy(&is->auddec);
      swr_free(&is->swr_ctx);
      av_freep(&is->audio_buf1);
      is->audio_buf1_size = 0;
      is->audio_buf = NULL;

      if (is->rdft) {
        av_rdft_end(is->rdft);
        av_freep(&is->rdft_data);
        is->rdft = NULL;
        is->rdft_bits = 0;
      }
      break;
    case AVMEDIA_TYPE_VIDEO:
      decoder_abort(&is->viddec, &is->pictq);
      decoder_destroy(&is->viddec);
      break;
    case AVMEDIA_TYPE_SUBTITLE:
      decoder_abort(&is->subdec, &is->subpq);
      decoder_destroy(&is->subdec);
      break;
    default:
      break;
  }

  ic->streams[stream_index]->discard = AVDISCARD_ALL;
  switch (codecpar->codec_type) {
    case AVMEDIA_TYPE_AUDIO:
      is->audio_st = NULL;
      is->audio_stream = -1;
      break;
    case AVMEDIA_TYPE_VIDEO:
      is->video_st = NULL;
      is->video_stream = -1;
      break;
    case AVMEDIA_TYPE_SUBTITLE:
      is->subtitle_st = NULL;
      is->subtitle_stream = -1;
      break;
    default:
      break;
  }
}

static void stream_close(VideoState* is) {
  /* XXX: use a special url_shutdown call to abort parse cleanly */
  is->abort_request = 1;
  tk_thread_join(is->read_tid);

  /* close each stream */
  if (is->audio_stream >= 0) stream_component_close(is, is->audio_stream);
  if (is->video_stream >= 0) stream_component_close(is, is->video_stream);
  if (is->subtitle_stream >= 0) stream_component_close(is, is->subtitle_stream);

  avformat_close_input(&is->ic);

  packet_queue_destroy(&is->videoq);
  packet_queue_destroy(&is->audioq);
  packet_queue_destroy(&is->subtitleq);

  /* free all pictures */
  frame_queue_destory(&is->pictq);
  frame_queue_destory(&is->sampq);
  frame_queue_destory(&is->subpq);
  tk_cond_destroy(is->continue_read_thread);
  sws_freeContext(is->swsContext);
  sws_freeContext(is->sub_convert_ctx);
  av_free(is->filename);
  av_free(is);
}

static double get_clock(Clock* c) {
  if (*c->queue_serial != c->serial) return NAN;
  if (c->paused) {
    return c->pts;
  } else {
    double time = av_gettime_relative() / 1000000.0;
    return c->pts_drift + time - (time - c->last_updated) * (1.0 - c->speed);
  }
}

static void set_clock_at(Clock* c, double pts, int serial, double time) {
  c->pts = pts;
  c->last_updated = time;
  c->pts_drift = c->pts - time;
  c->serial = serial;
}

static void set_clock(Clock* c, double pts, int serial) {
  double time = av_gettime_relative() / 1000000.0;
  set_clock_at(c, pts, serial, time);
}

static void set_clock_speed(Clock* c, double speed) {
  set_clock(c, get_clock(c), c->serial);
  c->speed = speed;
}

static void init_clock(Clock* c, int* queue_serial) {
  c->speed = 1.0;
  c->paused = 0;
  c->queue_serial = queue_serial;
  set_clock(c, NAN, -1);
}

static void sync_clock_to_slave(Clock* c, Clock* slave) {
  double clock = get_clock(c);
  double slave_clock = get_clock(slave);
  if (!isnan(slave_clock) && (isnan(clock) || fabs(clock - slave_clock) > AV_NOSYNC_THRESHOLD))
    set_clock(c, slave_clock, slave->serial);
}

static int get_master_sync_type(VideoState* is) {
  if (is->av_sync_type == AV_SYNC_VIDEO_MASTER) {
    if (is->video_st)
      return AV_SYNC_VIDEO_MASTER;
    else
      return AV_SYNC_AUDIO_MASTER;
  } else if (is->av_sync_type == AV_SYNC_AUDIO_MASTER) {
    if (is->audio_st)
      return AV_SYNC_AUDIO_MASTER;
    else
      return AV_SYNC_EXTERNAL_CLOCK;
  } else {
    return AV_SYNC_EXTERNAL_CLOCK;
  }
}

/* get the current master clock value */
static double get_master_clock(VideoState* is) {
  double val;

  switch (get_master_sync_type(is)) {
    case AV_SYNC_VIDEO_MASTER:
      val = get_clock(&is->vidclk);
      break;
    case AV_SYNC_AUDIO_MASTER:
      val = get_clock(&is->audclk);
      break;
    default:
      val = get_clock(&is->extclk);
      break;
  }
  return val;
}

static void check_external_clock_speed(VideoState* is) {
  if ((is->video_stream >= 0 && (is->videoq.nb_packets <= EXTERNAL_CLOCK_MIN_FRAMES)) ||
      (is->audio_stream >= 0 && (is->audioq.nb_packets <= EXTERNAL_CLOCK_MIN_FRAMES))) {
    set_clock_speed(&is->extclk,
                    FFMAX(EXTERNAL_CLOCK_SPEED_MIN, is->extclk.speed - EXTERNAL_CLOCK_SPEED_STEP));
  } else if ((is->video_stream < 0 || is->videoq.nb_packets > EXTERNAL_CLOCK_MAX_FRAMES) &&
             (is->audio_stream < 0 || is->audioq.nb_packets > EXTERNAL_CLOCK_MAX_FRAMES)) {
    set_clock_speed(&is->extclk,
                    FFMIN(EXTERNAL_CLOCK_SPEED_MAX, is->extclk.speed + EXTERNAL_CLOCK_SPEED_STEP));
  } else {
    double speed = is->extclk.speed;
    if (speed != 1.0)
      set_clock_speed(&is->extclk,
                      speed + EXTERNAL_CLOCK_SPEED_STEP * (1.0 - speed) / fabs(1.0 - speed));
  }
}

/* seek in the stream */
static void stream_seek(VideoState* is, int64_t pos, int64_t rel, int seek_by_bytes) {
  if (!is->seek_req) {
    is->seek_pos = pos;
    is->seek_rel = rel;
    is->seek_flags &= ~AVSEEK_FLAG_BYTE;
    if (seek_by_bytes) is->seek_flags |= AVSEEK_FLAG_BYTE;
    is->seek_req = 1;
    tk_cond_signal(is->continue_read_thread);
  }
}

/* pause or resume the video */
static void stream_toggle_pause(VideoState* is) {
  if (is->paused) {
    is->frame_timer += av_gettime_relative() / 1000000.0 - is->vidclk.last_updated;
    if (is->read_pause_return != AVERROR(ENOSYS)) {
      is->vidclk.paused = 0;
    }
    set_clock(&is->vidclk, get_clock(&is->vidclk), is->vidclk.serial);
  }
  set_clock(&is->extclk, get_clock(&is->extclk), is->extclk.serial);
  is->paused = is->audclk.paused = is->vidclk.paused = is->extclk.paused = !is->paused;
}

static void toggle_pause(VideoState* is) {
  stream_toggle_pause(is);
  is->step = 0;
}

static void toggle_mute(VideoState* is) {
  is->muted = !is->muted;
}

static void step_to_next_frame(VideoState* is) {
  /* if the stream is paused unpause it, then step */
  if (is->paused) stream_toggle_pause(is);
  is->step = 1;
}

static double compute_target_delay(double delay, VideoState* is) {
  double sync_threshold, diff = 0;

  /* update delay to follow master synchronisation source */
  if (get_master_sync_type(is) != AV_SYNC_VIDEO_MASTER) {
    /* if video is slave, we try to correct big delays by
       duplicating or deleting a frame */
    diff = get_clock(&is->vidclk) - get_master_clock(is);

    /* skip or repeat frame. We take into account the
       delay to compute the threshold. I still don't know
       if it is the best guess */
    sync_threshold = FFMAX(AV_SYNC_THRESHOLD_MIN, FFMIN(AV_SYNC_THRESHOLD_MAX, delay));
    if (!isnan(diff) && fabs(diff) < is->max_frame_duration) {
      if (diff <= -sync_threshold)
        delay = FFMAX(0, delay + diff);
      else if (diff >= sync_threshold && delay > AV_SYNC_FRAMEDUP_THRESHOLD)
        delay = delay + diff;
      else if (diff >= sync_threshold)
        delay = 2 * delay;
    }
  }

  av_log(NULL, AV_LOG_TRACE, "video: delay=%0.3f A-V=%f\n", delay, -diff);

  return delay;
}

static double vp_duration(VideoState* is, Frame* vp, Frame* nextvp) {
  if (vp->serial == nextvp->serial) {
    double duration = nextvp->pts - vp->pts;
    if (isnan(duration) || duration <= 0 || duration > is->max_frame_duration)
      return vp->duration;
    else
      return duration;
  } else {
    return 0.0;
  }
}

static void update_video_pts(VideoState* is, double pts, int64_t pos, int serial) {
  /* update current video pts */
  set_clock(&is->vidclk, pts, serial);
  sync_clock_to_slave(&is->extclk, &is->vidclk);
}

/* called to display each frame */
static void video_refresh(void* opaque, double* remaining_time) {
  VideoState* is = opaque;
  double time;

  Frame *sp, *sp2;

  if (!is->paused && get_master_sync_type(is) == AV_SYNC_EXTERNAL_CLOCK && is->realtime)
    check_external_clock_speed(is);

  if (is->show_mode != SHOW_MODE_VIDEO && is->audio_st) {
    time = av_gettime_relative() / 1000000.0;
    if (is->force_refresh || is->last_vis_time + rdftspeed < time) {
      video_display(is);
      is->last_vis_time = time;
    }
    *remaining_time = FFMIN(*remaining_time, is->last_vis_time + rdftspeed - time);
  }

  if (is->video_st) {
  retry:
    if (frame_queue_nb_remaining(&is->pictq) == 0) {
      // nothing to do, no picture to display in the queue
    } else {
      double last_duration, duration, delay;
      Frame *vp, *lastvp;

      /* dequeue the picture */
      lastvp = frame_queue_peek_last(&is->pictq);
      vp = frame_queue_peek(&is->pictq);

      if (vp->serial != is->videoq.serial) {
        frame_queue_next(&is->pictq);
        goto retry;
      }

      if (lastvp->serial != vp->serial) is->frame_timer = av_gettime_relative() / 1000000.0;

      if (is->paused) goto display;

      /* compute nominal last_duration */
      last_duration = vp_duration(is, lastvp, vp);
      delay = compute_target_delay(last_duration, is);

      time = av_gettime_relative() / 1000000.0;
      if (time < is->frame_timer + delay) {
        *remaining_time = FFMIN(is->frame_timer + delay - time, *remaining_time);
        goto display;
      }

      is->frame_timer += delay;
      if (delay > 0 && time - is->frame_timer > AV_SYNC_THRESHOLD_MAX) is->frame_timer = time;

      tk_mutex_lock(is->pictq.mutex);
      if (!isnan(vp->pts)) update_video_pts(is, vp->pts, vp->pos, vp->serial);
      tk_mutex_unlock(is->pictq.mutex);

      if (frame_queue_nb_remaining(&is->pictq) > 1) {
        Frame* nextvp = frame_queue_peek_next(&is->pictq);
        duration = vp_duration(is, vp, nextvp);
        if (!is->step &&
            (framedrop > 0 || (framedrop && get_master_sync_type(is) != AV_SYNC_VIDEO_MASTER)) &&
            time > is->frame_timer + duration) {
          is->frame_drops_late++;
          frame_queue_next(&is->pictq);
          goto retry;
        }
      }

      if (is->subtitle_st) {
        while (frame_queue_nb_remaining(&is->subpq) > 0) {
          sp = frame_queue_peek(&is->subpq);

          if (frame_queue_nb_remaining(&is->subpq) > 1)
            sp2 = frame_queue_peek_next(&is->subpq);
          else
            sp2 = NULL;

          if (sp->serial != is->subtitleq.serial ||
              (is->vidclk.pts > (sp->pts + ((float)sp->sub.end_display_time / 1000))) ||
              (sp2 && is->vidclk.pts > (sp2->pts + ((float)sp2->sub.start_display_time / 1000)))) {
            frame_queue_next(&is->subpq);
          } else {
            break;
          }
        }
      }

      frame_queue_next(&is->pictq);
      is->force_refresh = 1;

      if (is->step && !is->paused) stream_toggle_pause(is);
    }
  display:
    /* display picture */
    if (is->force_refresh && is->show_mode == SHOW_MODE_VIDEO && is->pictq.rindex_shown)
      video_display(is);
  }
  is->force_refresh = 0;
  if (show_status) {
    static int64_t last_time;
    int64_t cur_time;
    int aqsize, vqsize, sqsize;
    double av_diff;

    cur_time = av_gettime_relative();
    if (!last_time || (cur_time - last_time) >= 30000) {
      aqsize = 0;
      vqsize = 0;
      sqsize = 0;
      if (is->audio_st) aqsize = is->audioq.size;
      if (is->video_st) vqsize = is->videoq.size;
      if (is->subtitle_st) sqsize = is->subtitleq.size;
      av_diff = 0;
      if (is->audio_st && is->video_st)
        av_diff = get_clock(&is->audclk) - get_clock(&is->vidclk);
      else if (is->video_st)
        av_diff = get_master_clock(is) - get_clock(&is->vidclk);
      else if (is->audio_st)
        av_diff = get_master_clock(is) - get_clock(&is->audclk);
#if FFMPEG_DEBUG
      av_log(NULL, AV_LOG_INFO,
             "%7.2f %s:%7.3f fd=%4d aq=%5dKB vq=%5dKB sq=%5dB f=%" PRId64 "/%" PRId64 "   \r",
             get_master_clock(is),
             (is->audio_st && is->video_st)
                 ? "A-V"
                 : (is->video_st ? "M-V" : (is->audio_st ? "M-A" : "   ")),
             av_diff, is->frame_drops_early + is->frame_drops_late, aqsize / 1024, vqsize / 1024,
             sqsize, is->video_st ? is->viddec.avctx->pts_correction_num_faulty_dts : 0,
             is->video_st ? is->viddec.avctx->pts_correction_num_faulty_pts : 0);
      fflush(stdout);
#endif /*FFMPEG_DEBUG*/

      last_time = cur_time;
    }
  }
}

static int queue_picture(VideoState* is, AVFrame* src_frame, double pts, double duration,
                         int64_t pos, int serial) {
  Frame* vp;

#if defined(DEBUG_SYNC)
  printf("frame_type=%c pts=%0.3f\n", av_get_picture_type_char(src_frame->pict_type), pts);
#endif

  if (!(vp = frame_queue_peek_writable(&is->pictq))) return -1;

  vp->sar = src_frame->sample_aspect_ratio;

  vp->width = src_frame->width;
  vp->height = src_frame->height;
  vp->format = src_frame->format;

  vp->pts = pts;
  vp->duration = duration;
  vp->pos = pos;
  vp->serial = serial;

  av_frame_move_ref(vp->frame, src_frame);
  frame_queue_push(&is->pictq);

  return 0;
}

static int get_video_frame(VideoState* is, AVFrame* frame) {
  int got_picture;

  if ((got_picture = decoder_decode_frame(&is->viddec, frame, NULL)) < 0) return -1;

  if (got_picture) {
    double dpts = NAN;

    if (frame->pts != AV_NOPTS_VALUE) dpts = av_q2d(is->video_st->time_base) * frame->pts;

    frame->sample_aspect_ratio = av_guess_sample_aspect_ratio(is->ic, is->video_st, frame);

    if (framedrop > 0 || (framedrop && get_master_sync_type(is) != AV_SYNC_VIDEO_MASTER)) {
      if (frame->pts != AV_NOPTS_VALUE) {
        double diff = dpts - get_master_clock(is);
        if (!isnan(diff) && fabs(diff) < AV_NOSYNC_THRESHOLD &&
            diff - is->frame_last_filter_delay < 0 && is->viddec.pkt_serial == is->vidclk.serial &&
            is->videoq.nb_packets) {
          is->frame_drops_early++;
          av_frame_unref(frame);
          got_picture = 0;
        }
      }
    }
  }

  return got_picture;
}

#if CONFIG_AVFILTER
static int configure_filtergraph(AVFilterGraph* graph, const char* filtergraph,
                                 AVFilterContext* source_ctx, AVFilterContext* sink_ctx) {
  int ret, i;
  int nb_filters = graph->nb_filters;
  AVFilterInOut *outputs = NULL, *inputs = NULL;

  if (filtergraph) {
    outputs = avfilter_inout_alloc();
    inputs = avfilter_inout_alloc();
    if (!outputs || !inputs) {
      ret = AVERROR(ENOMEM);
      goto fail;
    }

    outputs->name = av_strdup("in");
    outputs->filter_ctx = source_ctx;
    outputs->pad_idx = 0;
    outputs->next = NULL;

    inputs->name = av_strdup("out");
    inputs->filter_ctx = sink_ctx;
    inputs->pad_idx = 0;
    inputs->next = NULL;

    if ((ret = avfilter_graph_parse_ptr(graph, filtergraph, &inputs, &outputs, NULL)) < 0)
      goto fail;
  } else {
    if ((ret = avfilter_link(source_ctx, 0, sink_ctx, 0)) < 0) goto fail;
  }

  /* Reorder the filters to ensure that inputs of the custom filters are merged first */
  for (i = 0; i < graph->nb_filters - nb_filters; i++)
    FFSWAP(AVFilterContext*, graph->filters[i], graph->filters[i + nb_filters]);

  ret = avfilter_graph_config(graph, NULL);
fail:
  avfilter_inout_free(&outputs);
  avfilter_inout_free(&inputs);
  return ret;
}

static int configure_video_filters(AVFilterGraph* graph, VideoState* is, const char* vfilters,
                                   AVFrame* frame) {
  enum AVPixelFormat pix_fmts[FF_ARRAY_ELEMS(sdl_texture_format_map)];
  char sws_flags_str[512] = "";
  char buffersrc_args[256];
  int ret;
  AVFilterContext *filt_src = NULL, *filt_out = NULL, *last_filter = NULL;
  AVCodecParameters* codecpar = is->video_st->codecpar;
  AVRational fr = av_guess_frame_rate(is->ic, is->video_st, NULL);
  AVDictionaryEntry* e = NULL;
  int nb_pix_fmts = 0;

  pix_fmts[nb_pix_fmts] = AV_PIX_FMT_NONE;

  while ((e = av_dict_get(sws_dict, "", e, AV_DICT_IGNORE_SUFFIX))) {
    if (!strcmp(e->key, "sws_flags")) {
      av_strlcatf(sws_flags_str, sizeof(sws_flags_str), "%s=%s:", "flags", e->value);
    } else
      av_strlcatf(sws_flags_str, sizeof(sws_flags_str), "%s=%s:", e->key, e->value);
  }
  if (strlen(sws_flags_str)) sws_flags_str[strlen(sws_flags_str) - 1] = '\0';

  graph->scale_sws_opts = av_strdup(sws_flags_str);

  snprintf(buffersrc_args, sizeof(buffersrc_args),
           "video_size=%dx%d:pix_fmt=%d:time_base=%d/%d:pixel_aspect=%d/%d", frame->width,
           frame->height, frame->format, is->video_st->time_base.num, is->video_st->time_base.den,
           codecpar->sample_aspect_ratio.num, FFMAX(codecpar->sample_aspect_ratio.den, 1));
  if (fr.num && fr.den)
    av_strlcatf(buffersrc_args, sizeof(buffersrc_args), ":frame_rate=%d/%d", fr.num, fr.den);

  if ((ret = avfilter_graph_create_filter(&filt_src, avfilter_get_by_name("buffer"),
                                          "ffplay_buffer", buffersrc_args, NULL, graph)) < 0)
    goto fail;

  ret = avfilter_graph_create_filter(&filt_out, avfilter_get_by_name("buffersink"),
                                     "ffplay_buffersink", NULL, NULL, graph);
  if (ret < 0) goto fail;

  if ((ret = av_opt_set_int_list(filt_out, "pix_fmts", pix_fmts, AV_PIX_FMT_NONE,
                                 AV_OPT_SEARCH_CHILDREN)) < 0)
    goto fail;

  last_filter = filt_out;

/* Note: this macro adds a filter before the lastly added filter, so the
 * processing order of the filters is in reverse */
#define INSERT_FILT(name, arg)                                                                     \
  do {                                                                                             \
    AVFilterContext* filt_ctx;                                                                     \
                                                                                                   \
    ret = avfilter_graph_create_filter(&filt_ctx, avfilter_get_by_name(name), "ffplay_" name, arg, \
                                       NULL, graph);                                               \
    if (ret < 0) goto fail;                                                                        \
                                                                                                   \
    ret = avfilter_link(filt_ctx, 0, last_filter, 0);                                              \
    if (ret < 0) goto fail;                                                                        \
                                                                                                   \
    last_filter = filt_ctx;                                                                        \
  } while (0)

  if (autorotate) {
    double theta = get_rotation(is->video_st);

    if (fabs(theta - 90) < 1.0) {
      INSERT_FILT("transpose", "clock");
    } else if (fabs(theta - 180) < 1.0) {
      INSERT_FILT("hflip", NULL);
      INSERT_FILT("vflip", NULL);
    } else if (fabs(theta - 270) < 1.0) {
      INSERT_FILT("transpose", "cclock");
    } else if (fabs(theta) > 1.0) {
      char rotate_buf[64];
      snprintf(rotate_buf, sizeof(rotate_buf), "%f*PI/180", theta);
      INSERT_FILT("rotate", rotate_buf);
    }
  }

  if ((ret = configure_filtergraph(graph, vfilters, filt_src, last_filter)) < 0) goto fail;

  is->in_video_filter = filt_src;
  is->out_video_filter = filt_out;

fail:
  return ret;
}

static int configure_audio_filters(VideoState* is, const char* afilters, int force_output_format) {
  static const enum AVSampleFormat sample_fmts[] = {AV_SAMPLE_FMT_S16, AV_SAMPLE_FMT_NONE};
  int sample_rates[2] = {0, -1};
  int64_t channel_layouts[2] = {0, -1};
  int channels[2] = {0, -1};
  AVFilterContext *filt_asrc = NULL, *filt_asink = NULL;
  char aresample_swr_opts[512] = "";
  AVDictionaryEntry* e = NULL;
  char asrc_args[256];
  int ret;

  avfilter_graph_free(&is->agraph);
  if (!(is->agraph = avfilter_graph_alloc())) return AVERROR(ENOMEM);
  is->agraph->nb_threads = filter_nbthreads;

  while ((e = av_dict_get(swr_opts, "", e, AV_DICT_IGNORE_SUFFIX)))
    av_strlcatf(aresample_swr_opts, sizeof(aresample_swr_opts), "%s=%s:", e->key, e->value);
  if (strlen(aresample_swr_opts)) aresample_swr_opts[strlen(aresample_swr_opts) - 1] = '\0';
  av_opt_set(is->agraph, "aresample_swr_opts", aresample_swr_opts, 0);

  ret = snprintf(asrc_args, sizeof(asrc_args),
                 "sample_rate=%d:sample_fmt=%s:channels=%d:time_base=%d/%d",
                 is->audio_filter_src.freq, av_get_sample_fmt_name(is->audio_filter_src.fmt),
                 is->audio_filter_src.channels, 1, is->audio_filter_src.freq);
  if (is->audio_filter_src.channel_layout)
    snprintf(asrc_args + ret, sizeof(asrc_args) - ret, ":channel_layout=0x%" PRIx64,
             is->audio_filter_src.channel_layout);

  ret = avfilter_graph_create_filter(&filt_asrc, avfilter_get_by_name("abuffer"), "ffplay_abuffer",
                                     asrc_args, NULL, is->agraph);
  if (ret < 0) goto end;

  ret = avfilter_graph_create_filter(&filt_asink, avfilter_get_by_name("abuffersink"),
                                     "ffplay_abuffersink", NULL, NULL, is->agraph);
  if (ret < 0) goto end;

  if ((ret = av_opt_set_int_list(filt_asink, "sample_fmts", sample_fmts, AV_SAMPLE_FMT_NONE,
                                 AV_OPT_SEARCH_CHILDREN)) < 0)
    goto end;
  if ((ret = av_opt_set_int(filt_asink, "all_channel_counts", 1, AV_OPT_SEARCH_CHILDREN)) < 0)
    goto end;

  if (force_output_format) {
    channel_layouts[0] = is->audio_tgt.channel_layout;
    channels[0] = is->audio_tgt.channels;
    sample_rates[0] = is->audio_tgt.freq;
    if ((ret = av_opt_set_int(filt_asink, "all_channel_counts", 0, AV_OPT_SEARCH_CHILDREN)) < 0)
      goto end;
    if ((ret = av_opt_set_int_list(filt_asink, "channel_layouts", channel_layouts, -1,
                                   AV_OPT_SEARCH_CHILDREN)) < 0)
      goto end;
    if ((ret = av_opt_set_int_list(filt_asink, "channel_counts", channels, -1,
                                   AV_OPT_SEARCH_CHILDREN)) < 0)
      goto end;
    if ((ret = av_opt_set_int_list(filt_asink, "sample_rates", sample_rates, -1,
                                   AV_OPT_SEARCH_CHILDREN)) < 0)
      goto end;
  }

  if ((ret = configure_filtergraph(is->agraph, afilters, filt_asrc, filt_asink)) < 0) goto end;

  is->in_audio_filter = filt_asrc;
  is->out_audio_filter = filt_asink;

end:
  if (ret < 0) avfilter_graph_free(&is->agraph);
  return ret;
}
#endif /* CONFIG_AVFILTER */

static int audio_thread(void* arg) {
  VideoState* is = arg;
  AVFrame* frame = av_frame_alloc();
  Frame* af;
#if CONFIG_AVFILTER
  int last_serial = -1;
  int64_t dec_channel_layout;
  int reconfigure;
#endif
  int got_frame = 0;
  AVRational tb;
  int ret = 0;

  if (!frame) return AVERROR(ENOMEM);

  do {
    if ((got_frame = decoder_decode_frame(&is->auddec, frame, NULL)) < 0) goto the_end;

    if (got_frame) {
      tb = (AVRational){1, frame->sample_rate};

#if CONFIG_AVFILTER
      dec_channel_layout = get_valid_channel_layout(frame->channel_layout, frame->channels);

      reconfigure = cmp_audio_fmts(is->audio_filter_src.fmt, is->audio_filter_src.channels,
                                   frame->format, frame->channels) ||
                    is->audio_filter_src.channel_layout != dec_channel_layout ||
                    is->audio_filter_src.freq != frame->sample_rate ||
                    is->auddec.pkt_serial != last_serial;

      if (reconfigure) {
        char buf1[1024], buf2[1024];
        av_get_channel_layout_string(buf1, sizeof(buf1), -1, is->audio_filter_src.channel_layout);
        av_get_channel_layout_string(buf2, sizeof(buf2), -1, dec_channel_layout);
        av_log(NULL, AV_LOG_DEBUG,
               "Audio frame changed from rate:%d ch:%d fmt:%s layout:%s serial:%d to rate:%d ch:%d "
               "fmt:%s layout:%s serial:%d\n",
               is->audio_filter_src.freq, is->audio_filter_src.channels,
               av_get_sample_fmt_name(is->audio_filter_src.fmt), buf1, last_serial,
               frame->sample_rate, frame->channels, av_get_sample_fmt_name(frame->format), buf2,
               is->auddec.pkt_serial);

        is->audio_filter_src.fmt = frame->format;
        is->audio_filter_src.channels = frame->channels;
        is->audio_filter_src.channel_layout = dec_channel_layout;
        is->audio_filter_src.freq = frame->sample_rate;
        last_serial = is->auddec.pkt_serial;

        if ((ret = configure_audio_filters(is, afilters, 1)) < 0) goto the_end;
      }

      if ((ret = av_buffersrc_add_frame(is->in_audio_filter, frame)) < 0) goto the_end;

      while ((ret = av_buffersink_get_frame_flags(is->out_audio_filter, frame, 0)) >= 0) {
        tb = av_buffersink_get_time_base(is->out_audio_filter);
#endif
        if (!(af = frame_queue_peek_writable(&is->sampq))) goto the_end;

        af->pts = (frame->pts == AV_NOPTS_VALUE) ? NAN : frame->pts * av_q2d(tb);
        af->pos = frame->pkt_pos;
        af->serial = is->auddec.pkt_serial;
        af->duration = av_q2d((AVRational){frame->nb_samples, frame->sample_rate});

        av_frame_move_ref(af->frame, frame);
        frame_queue_push(&is->sampq);

#if CONFIG_AVFILTER
        if (is->audioq.serial != is->auddec.pkt_serial) break;
      }
      if (ret == AVERROR_EOF) is->auddec.finished = is->auddec.pkt_serial;
#endif
    }
  } while (ret >= 0 || ret == AVERROR(EAGAIN) || ret == AVERROR_EOF);
the_end:
#if CONFIG_AVFILTER
  avfilter_graph_free(&is->agraph);
#endif
  av_frame_free(&frame);
  return ret;
}

static int decoder_start(Decoder* d, int (*fn)(void*), const char* thread_name, void* arg) {
  packet_queue_start(d->queue);
  d->decoder_tid = tk_thread_create((tk_thread_entry_t)fn, arg);
  tk_thread_start(d->decoder_tid);
  if (!d->decoder_tid) {
    av_log(NULL, AV_LOG_ERROR, "tk_thread_create(): %s\n", "error");
    return AVERROR(ENOMEM);
  }
  return 0;
}

static int video_thread(void* arg) {
  VideoState* is = arg;
  AVFrame* frame = av_frame_alloc();
  double pts;
  double duration;
  int ret;
  AVRational tb = is->video_st->time_base;
  AVRational frame_rate = av_guess_frame_rate(is->ic, is->video_st, NULL);

#if CONFIG_AVFILTER
  AVFilterGraph* graph = NULL;
  AVFilterContext *filt_out = NULL, *filt_in = NULL;
  int last_w = 0;
  int last_h = 0;
  enum AVPixelFormat last_format = -2;
  int last_serial = -1;
  int last_vfilter_idx = 0;
#endif

  if (!frame) return AVERROR(ENOMEM);

  for (;;) {
    ret = get_video_frame(is, frame);
    if (ret < 0) goto the_end;
    if (!ret) continue;

#if CONFIG_AVFILTER
    if (last_w != frame->width || last_h != frame->height || last_format != frame->format ||
        last_serial != is->viddec.pkt_serial || last_vfilter_idx != is->vfilter_idx) {
      av_log(NULL, AV_LOG_DEBUG,
             "Video frame changed from size:%dx%d format:%s serial:%d to size:%dx%d format:%s "
             "serial:%d\n",
             last_w, last_h, (const char*)av_x_if_null(av_get_pix_fmt_name(last_format), "none"),
             last_serial, frame->width, frame->height,
             (const char*)av_x_if_null(av_get_pix_fmt_name(frame->format), "none"),
             is->viddec.pkt_serial);
      avfilter_graph_free(&graph);
      graph = avfilter_graph_alloc();
      if (!graph) {
        ret = AVERROR(ENOMEM);
        goto the_end;
      }
      graph->nb_threads = filter_nbthreads;
      if ((ret = configure_video_filters(
               graph, is, vfilters_list ? vfilters_list[is->vfilter_idx] : NULL, frame)) < 0) {
        goto the_end;
      }
      filt_in = is->in_video_filter;
      filt_out = is->out_video_filter;
      last_w = frame->width;
      last_h = frame->height;
      last_format = frame->format;
      last_serial = is->viddec.pkt_serial;
      last_vfilter_idx = is->vfilter_idx;
      frame_rate = av_buffersink_get_frame_rate(filt_out);
    }

    ret = av_buffersrc_add_frame(filt_in, frame);
    if (ret < 0) goto the_end;

    while (ret >= 0) {
      is->frame_last_returned_time = av_gettime_relative() / 1000000.0;

      ret = av_buffersink_get_frame_flags(filt_out, frame, 0);
      if (ret < 0) {
        if (ret == AVERROR_EOF) is->viddec.finished = is->viddec.pkt_serial;
        ret = 0;
        break;
      }

      is->frame_last_filter_delay =
          av_gettime_relative() / 1000000.0 - is->frame_last_returned_time;
      if (fabs(is->frame_last_filter_delay) > AV_NOSYNC_THRESHOLD / 10.0)
        is->frame_last_filter_delay = 0;
      tb = av_buffersink_get_time_base(filt_out);
#endif
      duration =
          (frame_rate.num && frame_rate.den ? av_q2d((AVRational){frame_rate.den, frame_rate.num})
                                            : 0);
      pts = (frame->pts == AV_NOPTS_VALUE) ? NAN : frame->pts * av_q2d(tb);
      ret = queue_picture(is, frame, pts, duration, frame->pkt_pos, is->viddec.pkt_serial);
      av_frame_unref(frame);
#if CONFIG_AVFILTER
      if (is->videoq.serial != is->viddec.pkt_serial) break;
    }
#endif

    if (ret < 0) goto the_end;
  }
the_end:
#if CONFIG_AVFILTER
  avfilter_graph_free(&graph);
#endif
  av_frame_free(&frame);
  return 0;
}

static int subtitle_thread(void* arg) {
  VideoState* is = arg;
  Frame* sp;
  int got_subtitle;
  double pts;

  for (;;) {
    if (!(sp = frame_queue_peek_writable(&is->subpq))) return 0;

    if ((got_subtitle = decoder_decode_frame(&is->subdec, NULL, &sp->sub)) < 0) break;

    pts = 0;

    if (got_subtitle && sp->sub.format == 0) {
      if (sp->sub.pts != AV_NOPTS_VALUE) pts = sp->sub.pts / (double)AV_TIME_BASE;
      sp->pts = pts;
      sp->serial = is->subdec.pkt_serial;
      sp->width = is->subdec.avctx->width;
      sp->height = is->subdec.avctx->height;

      /* now we can update the picture count */
      frame_queue_push(&is->subpq);
    } else if (got_subtitle) {
      avsubtitle_free(&sp->sub);
    }
  }
  return 0;
}

/* return the wanted number of samples to get better sync if sync_type is video
 * or external master clock */
static int synchronize_audio(VideoState* is, int nb_samples) {
  int wanted_nb_samples = nb_samples;

  /* if not master, then we try to remove or add samples to correct the clock */
  if (get_master_sync_type(is) != AV_SYNC_AUDIO_MASTER) {
    double diff, avg_diff;
    int min_nb_samples, max_nb_samples;

    diff = get_clock(&is->audclk) - get_master_clock(is);

    if (!isnan(diff) && fabs(diff) < AV_NOSYNC_THRESHOLD) {
      is->audio_diff_cum = diff + is->audio_diff_avg_coef * is->audio_diff_cum;
      if (is->audio_diff_avg_count < AUDIO_DIFF_AVG_NB) {
        /* not enough measures to have a correct estimate */
        is->audio_diff_avg_count++;
      } else {
        /* estimate the A-V difference */
        avg_diff = is->audio_diff_cum * (1.0 - is->audio_diff_avg_coef);

        if (fabs(avg_diff) >= is->audio_diff_threshold) {
          wanted_nb_samples = nb_samples + (int)(diff * is->audio_src.freq);
          min_nb_samples = ((nb_samples * (100 - SAMPLE_CORRECTION_PERCENT_MAX) / 100));
          max_nb_samples = ((nb_samples * (100 + SAMPLE_CORRECTION_PERCENT_MAX) / 100));
          wanted_nb_samples = av_clip(wanted_nb_samples, min_nb_samples, max_nb_samples);
        }
        av_log(NULL, AV_LOG_TRACE, "diff=%f adiff=%f sample_diff=%d apts=%0.3f %f\n", diff,
               avg_diff, wanted_nb_samples - nb_samples, is->audio_clock, is->audio_diff_threshold);
      }
    } else {
      /* too big difference : may be initial PTS errors, so
         reset A-V filter */
      is->audio_diff_avg_count = 0;
      is->audio_diff_cum = 0;
    }
  }

  return wanted_nb_samples;
}

/**
 * Decode one audio frame and return its uncompressed size.
 *
 * The processed audio frame is decoded, converted if required, and
 * stored in is->audio_buf, with size in bytes given by the return
 * value.
 */
static int audio_decode_frame(VideoState* is) {
  int data_size, resampled_data_size;
  int64_t dec_channel_layout;
  av_unused double audio_clock0;
  int wanted_nb_samples;
  Frame* af;

  if (is->paused) return -1;

  do {
#if defined(_WIN32)
    while (frame_queue_nb_remaining(&is->sampq) == 0) {
      if ((av_gettime_relative() - audio_callback_time) >
          1000000LL * is->audio_hw_buf_size / is->audio_tgt.bytes_per_sec / 2)
        return -1;
      av_usleep(1000);
    }
#endif
    if (!(af = frame_queue_peek_readable(&is->sampq))) return -1;
    frame_queue_next(&is->sampq);
  } while (af->serial != is->audioq.serial);

  data_size = av_samples_get_buffer_size(NULL, af->frame->channels, af->frame->nb_samples,
                                         af->frame->format, 1);

  dec_channel_layout =
      (af->frame->channel_layout &&
       af->frame->channels == av_get_channel_layout_nb_channels(af->frame->channel_layout))
          ? af->frame->channel_layout
          : av_get_default_channel_layout(af->frame->channels);
  wanted_nb_samples = synchronize_audio(is, af->frame->nb_samples);

  if (af->frame->format != is->audio_src.fmt ||
      dec_channel_layout != is->audio_src.channel_layout ||
      af->frame->sample_rate != is->audio_src.freq ||
      (wanted_nb_samples != af->frame->nb_samples && !is->swr_ctx)) {
    swr_free(&is->swr_ctx);
    is->swr_ctx = swr_alloc_set_opts(NULL, is->audio_tgt.channel_layout, is->audio_tgt.fmt,
                                     is->audio_tgt.freq, dec_channel_layout, af->frame->format,
                                     af->frame->sample_rate, 0, NULL);
    if (!is->swr_ctx || swr_init(is->swr_ctx) < 0) {
      av_log(NULL, AV_LOG_ERROR,
             "Cannot create sample rate converter for conversion of %d Hz %s %d channels to %d Hz "
             "%s %d channels!\n",
             af->frame->sample_rate, av_get_sample_fmt_name(af->frame->format), af->frame->channels,
             is->audio_tgt.freq, av_get_sample_fmt_name(is->audio_tgt.fmt), is->audio_tgt.channels);
      swr_free(&is->swr_ctx);
      return -1;
    }
    is->audio_src.channel_layout = dec_channel_layout;
    is->audio_src.channels = af->frame->channels;
    is->audio_src.freq = af->frame->sample_rate;
    is->audio_src.fmt = af->frame->format;
  }

  if (is->swr_ctx) {
    const uint8_t** in = (const uint8_t**)af->frame->extended_data;
    uint8_t** out = &is->audio_buf1;
    int out_count = (int64_t)wanted_nb_samples * is->audio_tgt.freq / af->frame->sample_rate + 256;
    int out_size =
        av_samples_get_buffer_size(NULL, is->audio_tgt.channels, out_count, is->audio_tgt.fmt, 0);
    int len2;
    if (out_size < 0) {
      av_log(NULL, AV_LOG_ERROR, "av_samples_get_buffer_size() failed\n");
      return -1;
    }
    if (wanted_nb_samples != af->frame->nb_samples) {
      if (swr_set_compensation(is->swr_ctx,
                               (wanted_nb_samples - af->frame->nb_samples) * is->audio_tgt.freq /
                                   af->frame->sample_rate,
                               wanted_nb_samples * is->audio_tgt.freq / af->frame->sample_rate) <
          0) {
        av_log(NULL, AV_LOG_ERROR, "swr_set_compensation() failed\n");
        return -1;
      }
    }
    av_fast_malloc(&is->audio_buf1, &is->audio_buf1_size, out_size);
    if (!is->audio_buf1) return AVERROR(ENOMEM);
    len2 = swr_convert(is->swr_ctx, out, out_count, in, af->frame->nb_samples);
    if (len2 < 0) {
      av_log(NULL, AV_LOG_ERROR, "swr_convert() failed\n");
      return -1;
    }
    if (len2 == out_count) {
      av_log(NULL, AV_LOG_WARNING, "audio buffer is probably too small\n");
      if (swr_init(is->swr_ctx) < 0) swr_free(&is->swr_ctx);
    }
    is->audio_buf = is->audio_buf1;
    resampled_data_size =
        len2 * is->audio_tgt.channels * av_get_bytes_per_sample(is->audio_tgt.fmt);
  } else {
    is->audio_buf = af->frame->data[0];
    resampled_data_size = data_size;
  }

  audio_clock0 = is->audio_clock;
  /* update the audio clock with the pts */
  if (!isnan(af->pts))
    is->audio_clock = af->pts + (double)af->frame->nb_samples / af->frame->sample_rate;
  else
    is->audio_clock = NAN;
  is->audio_clock_serial = af->serial;
#ifdef DEBUG
  {
    static double last_clock;
    printf("audio: delay=%0.3f clock=%0.3f clock0=%0.3f\n", is->audio_clock - last_clock,
           is->audio_clock, audio_clock0);
    last_clock = is->audio_clock;
  }
#endif
  return resampled_data_size;
}

/* prepare a new audio buffer */
static void audio_device_callback(void* opaque, uint8_t* stream, int len) {
  VideoState* is = opaque;
  int audio_size, len1;

  audio_callback_time = av_gettime_relative();

  while (len > 0) {
    if (is->audio_buf_index >= is->audio_buf_size) {
      audio_size = audio_decode_frame(is);
      if (audio_size < 0) {
        /* if error, just output silence */
        is->audio_buf = NULL;
        is->audio_buf_size =
            AWTK_AUDIO_MIN_BUFFER_SIZE / is->audio_tgt.frame_size * is->audio_tgt.frame_size;
      } else {
        is->audio_buf_size = audio_size;
      }
      is->audio_buf_index = 0;
    }
    len1 = is->audio_buf_size - is->audio_buf_index;
    if (len1 > len) len1 = len;
    if (!is->muted && is->audio_buf && is->audio_volume == AUDIO_DEVICE_MAXVOLUME)
      memcpy(stream, (uint8_t*)is->audio_buf + is->audio_buf_index, len1);
    else {
      memset(stream, 0, len1);
      if (!is->muted && is->audio_buf)
        audio_device_mix(audio_dev, stream, (uint8_t*)is->audio_buf + is->audio_buf_index, len1);
    }
    len -= len1;
    stream += len1;
    is->audio_buf_index += len1;
  }
  is->audio_write_buf_size = is->audio_buf_size - is->audio_buf_index;
  /* Let's assume the audio driver that is used by SDL has two periods. */
  if (!isnan(is->audio_clock)) {
    set_clock_at(&is->audclk,
                 is->audio_clock - (double)(2 * is->audio_hw_buf_size + is->audio_write_buf_size) /
                                       is->audio_tgt.bytes_per_sec,
                 is->audio_clock_serial, audio_callback_time / 1000000.0);
    sync_clock_to_slave(&is->extclk, &is->audclk);
  }
}

static int audio_open(void* opaque, int64_t wanted_channel_layout, int wanted_nb_channels,
                      int wanted_sample_rate, struct AudioParams* audio_hw_params) {
  audio_spec_t wanted_spec, spec;
  static const int next_nb_channels[] = {0, 0, 1, 6, 2, 6, 4, 6};
  static const int next_sample_rates[] = {0, 44100, 48000, 96000, 192000};
  int next_sample_rate_idx = FF_ARRAY_ELEMS(next_sample_rates) - 1;

  if (!wanted_channel_layout ||
      wanted_nb_channels != av_get_channel_layout_nb_channels(wanted_channel_layout)) {
    wanted_channel_layout = av_get_default_channel_layout(wanted_nb_channels);
    wanted_channel_layout &= ~AV_CH_LAYOUT_STEREO_DOWNMIX;
  }
  wanted_nb_channels = av_get_channel_layout_nb_channels(wanted_channel_layout);
  wanted_spec.channels = wanted_nb_channels;
  wanted_spec.freq = wanted_sample_rate;
  if (wanted_spec.freq <= 0 || wanted_spec.channels <= 0) {
    av_log(NULL, AV_LOG_ERROR, "Invalid sample rate or channel count!\n");
    return -1;
  }
  while (next_sample_rate_idx && next_sample_rates[next_sample_rate_idx] >= wanted_spec.freq)
    next_sample_rate_idx--;
  wanted_spec.format = AUDIO_FORMAT_S16SYS;
  wanted_spec.samples = FFMAX(AWTK_AUDIO_MIN_BUFFER_SIZE,
                              2 << av_log2(wanted_spec.freq / AWTK_AUDIO_MAX_CALLBACKS_PER_SEC));
  wanted_spec.callback = audio_device_callback;
  wanted_spec.callback_ctx = opaque;
  while (!(audio_dev = audio_device_mixer_create(NULL, &wanted_spec, &spec))) {
    av_log(NULL, AV_LOG_WARNING, "OpenAudio (%d channels, %d Hz): %s\n", wanted_spec.channels,
           wanted_spec.freq, "error");
    wanted_spec.channels = next_nb_channels[FFMIN(7, wanted_spec.channels)];
    if (!wanted_spec.channels) {
      wanted_spec.freq = next_sample_rates[next_sample_rate_idx--];
      wanted_spec.channels = wanted_nb_channels;
      if (!wanted_spec.freq) {
        av_log(NULL, AV_LOG_ERROR, "No more combinations to try, audio open failed\n");
        return -1;
      }
    }
    wanted_channel_layout = av_get_default_channel_layout(wanted_spec.channels);
  }
  if (spec.format != AUDIO_FORMAT_S16SYS) {
    av_log(NULL, AV_LOG_ERROR, "SDL advised audio format %d is not supported!\n", spec.format);
    return -1;
  }
  if (spec.channels != wanted_spec.channels) {
    wanted_channel_layout = av_get_default_channel_layout(spec.channels);
    if (!wanted_channel_layout) {
      av_log(NULL, AV_LOG_ERROR, "SDL advised channel count %d is not supported!\n", spec.channels);
      return -1;
    }
  }

  audio_hw_params->fmt = AV_SAMPLE_FMT_S16;
  audio_hw_params->freq = spec.freq;
  audio_hw_params->channel_layout = wanted_channel_layout;
  audio_hw_params->channels = spec.channels;
  audio_hw_params->frame_size =
      av_samples_get_buffer_size(NULL, audio_hw_params->channels, 1, audio_hw_params->fmt, 1);
  audio_hw_params->bytes_per_sec = av_samples_get_buffer_size(
      NULL, audio_hw_params->channels, audio_hw_params->freq, audio_hw_params->fmt, 1);
  if (audio_hw_params->bytes_per_sec <= 0 || audio_hw_params->frame_size <= 0) {
    av_log(NULL, AV_LOG_ERROR, "av_samples_get_buffer_size failed\n");
    return -1;
  }
  return spec.size;
}

/* open a given stream. Return 0 if OK */
static int stream_component_open(VideoState* is, int stream_index) {
  AVFormatContext* ic = is->ic;
  AVCodecContext* avctx;
  AVCodec* codec;
  const char* forced_codec_name = NULL;
  AVDictionary* opts = NULL;
  AVDictionaryEntry* t = NULL;
  int sample_rate, nb_channels;
  int64_t channel_layout;
  int ret = 0;
  int stream_lowres = lowres;

  if (stream_index < 0 || stream_index >= ic->nb_streams) return -1;

  avctx = avcodec_alloc_context3(NULL);
  if (!avctx) return AVERROR(ENOMEM);

  ret = avcodec_parameters_to_context(avctx, ic->streams[stream_index]->codecpar);
  if (ret < 0) goto fail;
  avctx->pkt_timebase = ic->streams[stream_index]->time_base;

  codec = avcodec_find_decoder(avctx->codec_id);

  switch (avctx->codec_type) {
    case AVMEDIA_TYPE_AUDIO:
      is->last_audio_stream = stream_index;
      forced_codec_name = audio_codec_name;
      break;
    case AVMEDIA_TYPE_SUBTITLE:
      is->last_subtitle_stream = stream_index;
      forced_codec_name = subtitle_codec_name;
      break;
    case AVMEDIA_TYPE_VIDEO:
      is->last_video_stream = stream_index;
      forced_codec_name = video_codec_name;
      break;
    default:
      break;
  }
  if (forced_codec_name) codec = avcodec_find_decoder_by_name(forced_codec_name);
  if (!codec) {
    if (forced_codec_name)
      av_log(NULL, AV_LOG_WARNING, "No codec could be found with name '%s'\n", forced_codec_name);
    else
      av_log(NULL, AV_LOG_WARNING, "No decoder could be found for codec %s\n",
             avcodec_get_name(avctx->codec_id));
    ret = AVERROR(EINVAL);
    goto fail;
  }

  avctx->codec_id = codec->id;
  if (stream_lowres > codec->max_lowres) {
    av_log(avctx, AV_LOG_WARNING, "The maximum value for lowres supported by the decoder is %d\n",
           codec->max_lowres);
    stream_lowres = codec->max_lowres;
  }
  avctx->lowres = stream_lowres;

  if (fast) avctx->flags2 |= AV_CODEC_FLAG2_FAST;

  opts = filter_codec_opts(codec_opts, avctx->codec_id, ic, ic->streams[stream_index], codec);
  if (!av_dict_get(opts, "threads", NULL, 0)) av_dict_set(&opts, "threads", "auto", 0);
  if (stream_lowres) av_dict_set_int(&opts, "lowres", stream_lowres, 0);
  if (avctx->codec_type == AVMEDIA_TYPE_VIDEO || avctx->codec_type == AVMEDIA_TYPE_AUDIO)
    av_dict_set(&opts, "refcounted_frames", "1", 0);
  if ((ret = avcodec_open2(avctx, codec, &opts)) < 0) {
    goto fail;
  }
  if ((t = av_dict_get(opts, "", NULL, AV_DICT_IGNORE_SUFFIX))) {
    av_log(NULL, AV_LOG_ERROR, "Option %s not found.\n", t->key);
    ret = AVERROR_OPTION_NOT_FOUND;
    goto fail;
  }

  is->eof = 0;
  ic->streams[stream_index]->discard = AVDISCARD_DEFAULT;
  switch (avctx->codec_type) {
    case AVMEDIA_TYPE_AUDIO:
#if CONFIG_AVFILTER
    {
      AVFilterContext* sink;

      is->audio_filter_src.freq = avctx->sample_rate;
      is->audio_filter_src.channels = avctx->channels;
      is->audio_filter_src.channel_layout =
          get_valid_channel_layout(avctx->channel_layout, avctx->channels);
      is->audio_filter_src.fmt = avctx->sample_fmt;
      if ((ret = configure_audio_filters(is, afilters, 0)) < 0) goto fail;
      sink = is->out_audio_filter;
      sample_rate = av_buffersink_get_sample_rate(sink);
      nb_channels = av_buffersink_get_channels(sink);
      channel_layout = av_buffersink_get_channel_layout(sink);
    }
#else
      sample_rate = avctx->sample_rate;
      nb_channels = avctx->channels;
      channel_layout = avctx->channel_layout;
#endif

      /* prepare audio output */
      if ((ret = audio_open(is, channel_layout, nb_channels, sample_rate, &is->audio_tgt)) < 0)
        goto fail;
      is->audio_hw_buf_size = ret;
      is->audio_src = is->audio_tgt;
      is->audio_buf_size = 0;
      is->audio_buf_index = 0;

      /* init averaging filter */
      is->audio_diff_avg_coef = exp(log(0.01) / AUDIO_DIFF_AVG_NB);
      is->audio_diff_avg_count = 0;
      /* since we do not have a precise anough audio FIFO fullness,
         we correct audio sync only if larger than this threshold */
      is->audio_diff_threshold = (double)(is->audio_hw_buf_size) / is->audio_tgt.bytes_per_sec;

      is->audio_stream = stream_index;
      is->audio_st = ic->streams[stream_index];

      decoder_init(&is->auddec, avctx, &is->audioq, is->continue_read_thread);
      if ((is->ic->iformat->flags & (AVFMT_NOBINSEARCH | AVFMT_NOGENSEARCH | AVFMT_NO_BYTE_SEEK)) &&
          !is->ic->iformat->read_seek) {
        is->auddec.start_pts = is->audio_st->start_time;
        is->auddec.start_pts_tb = is->audio_st->time_base;
      }
      if ((ret = decoder_start(&is->auddec, audio_thread, "audio_decoder", is)) < 0) goto out;
      audio_device_start(audio_dev);
      break;
    case AVMEDIA_TYPE_VIDEO:
      is->video_stream = stream_index;
      is->video_st = ic->streams[stream_index];

      decoder_init(&is->viddec, avctx, &is->videoq, is->continue_read_thread);
      if ((ret = decoder_start(&is->viddec, video_thread, "video_decoder", is)) < 0) goto out;
      is->queue_attachments_req = 1;
      break;
    case AVMEDIA_TYPE_SUBTITLE:
      is->subtitle_stream = stream_index;
      is->subtitle_st = ic->streams[stream_index];

      decoder_init(&is->subdec, avctx, &is->subtitleq, is->continue_read_thread);
      if ((ret = decoder_start(&is->subdec, subtitle_thread, "subtitle_decoder", is)) < 0) goto out;
      break;
    default:
      break;
  }
  goto out;

fail:
  avcodec_free_context(&avctx);
out:
  av_dict_free(&opts);

  return ret;
}

static int decode_interrupt_cb(void* ctx) {
  VideoState* is = ctx;
  return is->abort_request;
}

static int stream_has_enough_packets(AVStream* st, int stream_id, PacketQueue* queue) {
  return stream_id < 0 || queue->abort_request || (st->disposition & AV_DISPOSITION_ATTACHED_PIC) ||
         (queue->nb_packets > MIN_FRAMES &&
          (!queue->duration || av_q2d(st->time_base) * queue->duration > 1.0));
}

static int is_realtime(AVFormatContext* s) {
  if (!strcmp(s->iformat->name, "rtp") || !strcmp(s->iformat->name, "rtsp") ||
      !strcmp(s->iformat->name, "sdp"))
    return 1;

  if (s->pb && (!strncmp(s->url, "rtp:", 4) || !strncmp(s->url, "udp:", 4))) return 1;
  return 0;
}

/* this thread gets the stream from the disk or the network */
static int read_thread(void* arg) {
  VideoState* is = arg;
  AVFormatContext* ic = NULL;
  int err, i, ret;
  int st_index[AVMEDIA_TYPE_NB];
  AVPacket pkt1, *pkt = &pkt1;
  int64_t stream_start_time;
  int pkt_in_play_range = 0;
  AVDictionaryEntry* t;
  tk_mutex_t* wait_mutex = tk_mutex_create();
  int scan_all_pmts_set = 0;
  int64_t pkt_ts;
  const char* input_filename = is->filename;
  AVRational sar = {0, 1};

  if (!wait_mutex) {
    av_log(NULL, AV_LOG_FATAL, "tk_mutex_create(): %s\n", "error");
    ret = AVERROR(ENOMEM);
    goto fail;
  }

  memset(st_index, -1, sizeof(st_index));
  is->last_video_stream = is->video_stream = -1;
  is->last_audio_stream = is->audio_stream = -1;
  is->last_subtitle_stream = is->subtitle_stream = -1;
  is->eof = 0;

  ic = avformat_alloc_context();
  if (!ic) {
    av_log(NULL, AV_LOG_FATAL, "Could not allocate context.\n");
    ret = AVERROR(ENOMEM);
    goto fail;
  }
  ic->interrupt_callback.callback = decode_interrupt_cb;
  ic->interrupt_callback.opaque = is;
  if (!av_dict_get(format_opts, "scan_all_pmts", NULL, AV_DICT_MATCH_CASE)) {
    av_dict_set(&format_opts, "scan_all_pmts", "1", AV_DICT_DONT_OVERWRITE);
    scan_all_pmts_set = 1;
  }
  err = avformat_open_input(&ic, is->filename, is->iformat, &format_opts);
  if (err < 0) {
    print_error(is->filename, err);
    ret = -1;
    goto fail;
  }
  if (scan_all_pmts_set) av_dict_set(&format_opts, "scan_all_pmts", NULL, AV_DICT_MATCH_CASE);

  if ((t = av_dict_get(format_opts, "", NULL, AV_DICT_IGNORE_SUFFIX))) {
    av_log(NULL, AV_LOG_ERROR, "Option %s not found.\n", t->key);
    ret = AVERROR_OPTION_NOT_FOUND;
    goto fail;
  }
  is->ic = ic;

  if (genpts) ic->flags |= AVFMT_FLAG_GENPTS;

  av_format_inject_global_side_data(ic);

  if (find_stream_info) {
    AVDictionary** opts = setup_find_stream_info_opts(ic, codec_opts);
    int orig_nb_streams = ic->nb_streams;

    err = avformat_find_stream_info(ic, opts);

    for (i = 0; i < orig_nb_streams; i++) av_dict_free(&opts[i]);
    av_freep(&opts);

    if (err < 0) {
      av_log(NULL, AV_LOG_WARNING, "%s: could not find codec parameters\n", is->filename);
      ret = -1;
      goto fail;
    }
  }

  if (ic->pb)
    ic->pb->eof_reached =
        0;  // FIXME hack, ffplay maybe should not use avio_feof() to test for the end

  if (seek_by_bytes < 0)
    seek_by_bytes = !!(ic->iformat->flags & AVFMT_TS_DISCONT) && strcmp("ogg", ic->iformat->name);

  is->max_frame_duration = (ic->iformat->flags & AVFMT_TS_DISCONT) ? 10.0 : 3600.0;

  /* if seeking requested, we execute it */
  if (start_time != AV_NOPTS_VALUE) {
    int64_t timestamp;

    timestamp = start_time;
    /* add the stream start time */
    if (ic->start_time != AV_NOPTS_VALUE) timestamp += ic->start_time;
    ret = avformat_seek_file(ic, -1, INT64_MIN, timestamp, INT64_MAX, 0);
    if (ret < 0) {
      av_log(NULL, AV_LOG_WARNING, "%s: could not seek to position %0.3f\n", is->filename,
             (double)timestamp / AV_TIME_BASE);
    }
  }

  is->realtime = is_realtime(ic);

  if (show_status) av_dump_format(ic, 0, is->filename, 0);

  for (i = 0; i < ic->nb_streams; i++) {
    AVStream* st = ic->streams[i];
    enum AVMediaType type = st->codecpar->codec_type;
    st->discard = AVDISCARD_ALL;
    if (type >= 0 && wanted_stream_spec[type] && st_index[type] == -1)
      if (avformat_match_stream_specifier(ic, st, wanted_stream_spec[type]) > 0) st_index[type] = i;
  }
  for (i = 0; i < AVMEDIA_TYPE_NB; i++) {
    if (wanted_stream_spec[i] && st_index[i] == -1) {
      av_log(NULL, AV_LOG_ERROR, "Stream specifier %s does not match any %s stream\n",
             wanted_stream_spec[i], av_get_media_type_string(i));
      st_index[i] = INT_MAX;
    }
  }

  if (!video_disable)
    st_index[AVMEDIA_TYPE_VIDEO] =
        av_find_best_stream(ic, AVMEDIA_TYPE_VIDEO, st_index[AVMEDIA_TYPE_VIDEO], -1, NULL, 0);
  if (!audio_disable)
    st_index[AVMEDIA_TYPE_AUDIO] =
        av_find_best_stream(ic, AVMEDIA_TYPE_AUDIO, st_index[AVMEDIA_TYPE_AUDIO],
                            st_index[AVMEDIA_TYPE_VIDEO], NULL, 0);
  if (!video_disable && !subtitle_disable)
    st_index[AVMEDIA_TYPE_SUBTITLE] =
        av_find_best_stream(ic, AVMEDIA_TYPE_SUBTITLE, st_index[AVMEDIA_TYPE_SUBTITLE],
                            (st_index[AVMEDIA_TYPE_AUDIO] >= 0 ? st_index[AVMEDIA_TYPE_AUDIO]
                                                               : st_index[AVMEDIA_TYPE_VIDEO]),
                            NULL, 0);

  is->show_mode = show_mode;
  if (st_index[AVMEDIA_TYPE_VIDEO] >= 0) {
    AVStream* st = ic->streams[st_index[AVMEDIA_TYPE_VIDEO]];
    AVCodecParameters* codecpar = st->codecpar;
    sar = av_guess_sample_aspect_ratio(ic, st, NULL);
    if (codecpar->width) {
      is->frame_width = codecpar->width;
      is->frame_height = codecpar->height;
    }
  }

  /* open the streams */
  if (st_index[AVMEDIA_TYPE_AUDIO] >= 0) {
    stream_component_open(is, st_index[AVMEDIA_TYPE_AUDIO]);
  }

  ret = -1;
  if (st_index[AVMEDIA_TYPE_VIDEO] >= 0) {
    ret = stream_component_open(is, st_index[AVMEDIA_TYPE_VIDEO]);
  }
  if (is->show_mode == SHOW_MODE_NONE) is->show_mode = ret >= 0 ? SHOW_MODE_VIDEO : SHOW_MODE_RDFT;

  if (st_index[AVMEDIA_TYPE_SUBTITLE] >= 0) {
    stream_component_open(is, st_index[AVMEDIA_TYPE_SUBTITLE]);
  }

  if (is->video_stream < 0 && is->audio_stream < 0) {
    av_log(NULL, AV_LOG_FATAL, "Failed to open file '%s' or configure filtergraph\n", is->filename);
    ret = -1;
    goto fail;
  } else {
    uint32_t w = is->frame_width;
    uint32_t h = is->frame_height;
    media_player_loaded_event_t event;
    bool_t has_audio = is->audio_stream >= 0;
    bool_t has_video = is->video_stream >= 0;
    uint32_t duration = is->ic->duration / 1000;
    bool_t has_subtitle = is->subtitle_stream >= 0;
    event_t* e =
        media_player_loaded_event_init(&event, has_audio, has_video, has_subtitle, duration, w, h);
    int display_aspect_ratio_w = 0;
    int display_aspect_ratio_h = 0;

    av_reduce(&display_aspect_ratio_w, &display_aspect_ratio_h, w * (int64_t)sar.num,
              h * (int64_t)sar.den, 1024 * 1024);
    event.display_aspect_ratio_w = display_aspect_ratio_w;
    event.display_aspect_ratio_h = display_aspect_ratio_h;

    media_player_ffmpeg_notify(is->player, e);
  }

  if (infinite_buffer < 0 && is->realtime) infinite_buffer = 1;

  for (;;) {
    if (is->abort_request) {
      break;
    }
    if (is->paused != is->last_paused) {
      is->last_paused = is->paused;
      if (is->paused) {
        is->read_pause_return = av_read_pause(ic);
        media_player_notify_simple(is->player, EVT_MEDIA_PLAYER_PAUSED);
      } else {
        av_read_play(ic);
      }
    }
#if CONFIG_RTSP_DEMUXER || CONFIG_MMSH_PROTOCOL
    if (is->paused &&
        (!strcmp(ic->iformat->name, "rtsp") || (ic->pb && !strncmp(input_filename, "mmsh:", 5)))) {
      /* wait 10 ms to avoid trying to get another packet */
      /* XXX: horrible */
      sleep_ms(10);
      continue;
    }
#endif
    if (is->seek_req) {
      int64_t seek_target = is->seek_pos;
      int64_t seek_min = is->seek_rel > 0 ? seek_target - is->seek_rel + 2 : INT64_MIN;
      int64_t seek_max = is->seek_rel < 0 ? seek_target - is->seek_rel - 2 : INT64_MAX;
      // FIXME the +-2 is due to rounding being not done in the correct direction in generation
      //      of the seek_pos/seek_rel variables

      ret = avformat_seek_file(is->ic, -1, seek_min, seek_target, seek_max, is->seek_flags);
      if (ret < 0) {
        av_log(NULL, AV_LOG_ERROR, "%s: error while seeking\n", is->ic->url);
      } else {
        if (is->audio_stream >= 0) {
          packet_queue_flush(&is->audioq);
          packet_queue_put(&is->audioq, &flush_pkt);
        }
        if (is->subtitle_stream >= 0) {
          packet_queue_flush(&is->subtitleq);
          packet_queue_put(&is->subtitleq, &flush_pkt);
        }
        if (is->video_stream >= 0) {
          packet_queue_flush(&is->videoq);
          packet_queue_put(&is->videoq, &flush_pkt);
        }
        if (is->seek_flags & AVSEEK_FLAG_BYTE) {
          set_clock(&is->extclk, NAN, 0);
        } else {
          set_clock(&is->extclk, seek_target / (double)AV_TIME_BASE, 0);
        }
      }
      is->seek_req = 0;
      is->queue_attachments_req = 1;
      is->eof = 0;
      if (is->paused) step_to_next_frame(is);
    }
    if (is->queue_attachments_req) {
      if (is->video_st && is->video_st->disposition & AV_DISPOSITION_ATTACHED_PIC) {
        AVPacket copy = {0};
        if ((ret = av_packet_ref(&copy, &is->video_st->attached_pic)) < 0) goto fail;
        packet_queue_put(&is->videoq, &copy);
        packet_queue_put_nullpacket(&is->videoq, is->video_stream);
      }
      is->queue_attachments_req = 0;
    }

    /* if the queue are full, no need to read more */
    if (infinite_buffer < 1 &&
        (is->audioq.size + is->videoq.size + is->subtitleq.size > MAX_QUEUE_SIZE ||
         (stream_has_enough_packets(is->audio_st, is->audio_stream, &is->audioq) &&
          stream_has_enough_packets(is->video_st, is->video_stream, &is->videoq) &&
          stream_has_enough_packets(is->subtitle_st, is->subtitle_stream, &is->subtitleq)))) {
      /* wait 10 ms */
      tk_mutex_lock(wait_mutex);
      tk_cond_wait_timeout(is->continue_read_thread, wait_mutex, 10);
      tk_mutex_unlock(wait_mutex);
      continue;
    }
    if (!is->paused &&
        (!is->audio_st ||
         (is->auddec.finished == is->audioq.serial && frame_queue_nb_remaining(&is->sampq) == 0)) &&
        (!is->video_st ||
         (is->viddec.finished == is->videoq.serial && frame_queue_nb_remaining(&is->pictq) == 0))) {
      if (loop != 1 && (!loop || --loop)) {
        stream_seek(is, start_time != AV_NOPTS_VALUE ? start_time : 0, 0, 0);
      } else if (autoexit) {
        ret = AVERROR_EOF;
        goto fail;
      }
    }
    ret = av_read_frame(ic, pkt);
    if (ret < 0) {
      if ((ret == AVERROR_EOF || avio_feof(ic->pb)) && !is->eof) {
        if (is->video_stream >= 0) packet_queue_put_nullpacket(&is->videoq, is->video_stream);
        if (is->audio_stream >= 0) packet_queue_put_nullpacket(&is->audioq, is->audio_stream);
        if (is->subtitle_stream >= 0)
          packet_queue_put_nullpacket(&is->subtitleq, is->subtitle_stream);
        is->eof = 1;
      }
      if (ic->pb && ic->pb->error) break;
      tk_mutex_lock(wait_mutex);
      tk_cond_wait_timeout(is->continue_read_thread, wait_mutex, 10);
      tk_mutex_unlock(wait_mutex);
      continue;
    } else {
      is->eof = 0;
    }
    /* check if packet is in play range specified by user, then queue, otherwise discard */
    stream_start_time = ic->streams[pkt->stream_index]->start_time;
    pkt_ts = pkt->pts == AV_NOPTS_VALUE ? pkt->dts : pkt->pts;
    pkt_in_play_range = duration == AV_NOPTS_VALUE ||
                        (pkt_ts - (stream_start_time != AV_NOPTS_VALUE ? stream_start_time : 0)) *
                                    av_q2d(ic->streams[pkt->stream_index]->time_base) -
                                (double)(start_time != AV_NOPTS_VALUE ? start_time : 0) / 1000000 <=
                            ((double)duration / 1000000);
    if (pkt->stream_index == is->audio_stream && pkt_in_play_range) {
      packet_queue_put(&is->audioq, pkt);
    } else if (pkt->stream_index == is->video_stream && pkt_in_play_range &&
               !(is->video_st->disposition & AV_DISPOSITION_ATTACHED_PIC)) {
      packet_queue_put(&is->videoq, pkt);
    } else if (pkt->stream_index == is->subtitle_stream && pkt_in_play_range) {
      packet_queue_put(&is->subtitleq, pkt);
    } else {
      av_packet_unref(pkt);
    }
  }

fail:
  ret = 0;
  media_player_ffmpeg_notify_simple(is->player, EVT_MEDIA_PLAYER_DONE);

  if (ic && !is->ic) avformat_close_input(&ic);

  stream_close(is);
  tk_mutex_destroy(wait_mutex);
  return 0;
}

static VideoState* stream_open(const char* filename, media_player_t* player) {
  VideoState* is;
  AVInputFormat* iformat = NULL;
  is = av_mallocz(sizeof(VideoState));
  if (!is) return NULL;
  is->filename = av_strdup(filename);
  if (!is->filename) goto fail;
  is->iformat = iformat;
  is->ytop = 0;
  is->xleft = 0;
  is->player = player;

  /* start video display */
  if (frame_queue_init(&is->pictq, &is->videoq, VIDEO_PICTURE_QUEUE_SIZE, 1) < 0) goto fail;
  if (frame_queue_init(&is->subpq, &is->subtitleq, SUBPICTURE_QUEUE_SIZE, 0) < 0) goto fail;
  if (frame_queue_init(&is->sampq, &is->audioq, SAMPLE_QUEUE_SIZE, 1) < 0) goto fail;

  if (packet_queue_init(&is->videoq) < 0 || packet_queue_init(&is->audioq) < 0 ||
      packet_queue_init(&is->subtitleq) < 0)
    goto fail;

  if (!(is->continue_read_thread = tk_cond_create())) {
    av_log(NULL, AV_LOG_FATAL, "tk_cond_create(): %s\n", "error");
    goto fail;
  }

  init_clock(&is->vidclk, &is->videoq.serial);
  init_clock(&is->audclk, &is->audioq.serial);
  init_clock(&is->extclk, &is->extclk.serial);
  is->audio_clock_serial = -1;
  if (startup_volume < 0)
    av_log(NULL, AV_LOG_WARNING, "-volume=%d < 0, setting to 0\n", startup_volume);
  if (startup_volume > 100)
    av_log(NULL, AV_LOG_WARNING, "-volume=%d > 100, setting to 100\n", startup_volume);
  startup_volume = av_clip(startup_volume, 0, 100);
  startup_volume =
      av_clip(AUDIO_DEVICE_MAXVOLUME * startup_volume / 100, 0, AUDIO_DEVICE_MAXVOLUME);
  is->audio_volume = startup_volume;
  is->muted = 0;
  is->av_sync_type = av_sync_type;
  is->read_tid = tk_thread_create((tk_thread_entry_t)read_thread, is);
  tk_thread_start(is->read_tid);

  if (!is->read_tid) {
    av_log(NULL, AV_LOG_FATAL, "tk_thread_create(): %s\n", "error");
  fail:
    stream_close(is);
    return NULL;
  }
  return is;
}

/* Called from the main */
static int ffmpeg_init(void) {
  static int inited = FALSE;
  if (inited) {
    return 0;
  }

  inited = TRUE;
  autoexit = TRUE;

  init_dynload();
  avdevice_register_all();
  avformat_network_init();
  av_log_set_flags(AV_LOG_SKIP_REPEATED);

  init_opts();
  av_init_packet(&flush_pkt);
  flush_pkt.data = (uint8_t*)&flush_pkt;

  return 0;
}

static int ffmpeg_deinit(void) {
  avformat_network_deinit();

  return 0;
}
